#include <iostream>
using namespace std;

class node {
public:
    int val;
    node* next;
    node(int data) {
        val = data;
        next = NULL;
    }
};

class linkedlist {
public:
    node* head;
    linkedlist() {
        head = NULL;
    }
    void insertattail(int value) {
        node* new_node = new node(value);
        if (head == NULL) {
            head = new_node;
            return;
        }
        node* temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = new_node;
    }
    void display() {
        node* temp = head;
        while (temp != NULL) {
            cout << temp->val << " -> ";
            temp = temp->next;
        }
        cout << "NULL" << endl;
    }
    
    bool ispalindrome(node* head) {
       //find middle element
        node* slow = head;
        node* fast = head;
        while (fast && fast->next) {
            slow = slow->next;
            fast = fast->next;
        }

        //break ll into 2 parts
        node* curr = slow->next;
        node* prev = slow;
        slow->next = NULL;

    //reverse 2nd half of ll
        while (curr) {
            node* nextnode = curr->next;
            curr->next = prev;
            curr = nextnode;
        }
    //compare both parts of ll
        node* head1 = head;
        node* head2 = prev;
        while (head2) {
            if (head1->val != head2->val) {
                return false;
            }
            head1 = head1->next;
            head2 = head2->next;
        }
        return true;
    }
};

int main()
{
    linkedlist ll;
    for (int i = 0; i < 8; i++) {
        int a;
        cin >> a;
        ll.insertattail(a);
    }
    ll.display();
    cout << ll.ispalindrome(ll.head);

    return 0;
}
