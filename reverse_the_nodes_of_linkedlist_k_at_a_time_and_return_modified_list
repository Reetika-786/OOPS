#include <iostream>
using namespace std;

class node{
public:
    int val;
    node *next;
    node(int data){
        val= data;
        next= NULL;
    }
};

class linkedlist{
public:
    node *head;
    linkedlist(){
        head= NULL;
    }
    void insertattail(int value){
        node *new_node = new node(value);
        if(head==NULL){
            head= new_node;
            return;
        }
        node *temp =head;
        while(temp->next != NULL){
            temp = temp->next;
        }
        temp->next= new_node;
    }
    void display(){
        node *temp = head;
        while(temp != NULL){
            cout<<temp->val<<" -> ";
            temp = temp->next;
        }
        cout<<"NULL"<<endl;
    }
    node *reversekll(node *&head, int k){
        node* prevptr = NULL;
        node* currptr = head;
        
        int counter=0;  //for counting first k nodes
        
        while(currptr != NULL && counter<k){ //reversing first k nodes
            node* nextptr = currptr->next;
            currptr->next = prevptr;
            prevptr = currptr;
            currptr = nextptr;
            counter++;
        }
        //current pointer will give (k+1)th node
        if(currptr != NULL){
            node* newhead = reversekll(currptr, k); //recursive call
            head->next = newhead;
        }
        return prevptr;
    }
};

int main()
{
    linkedlist ll;
    for(int i=0;i<6;i++){
        int a;
        cin>>a;
        ll.insertattail(a);
    }
    ll.display();
    ll.head = ll.reversekll(ll.head,2 );
    ll.display();

    return 0;
}
