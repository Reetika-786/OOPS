#include <iostream>
using namespace std;

class node {
public:
    int val;
    node* next;
    node(int data) {
        val = data;
        next = NULL;
    }
};

class linkedlist {
public:
    node* head;
    linkedlist() {
        head = NULL;
    }
    void insertattail(int value) {
        node* new_node = new node(value);
        if (head == NULL) {
            head = new_node;
            return;
        }
        node* temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = new_node;
    }
    void display() {
        node* temp = head;
        while (temp != NULL) {
            cout << temp->val << " -> ";
            temp = temp->next;
        }
        cout << "NULL" << endl;
    }
    
    bool detectcycle(node* head) {
        node* slow = head;
        node* fast = head;
        while (fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
            if (slow == fast) {
                cout << slow->val << endl;  //node where slow and fast ptrs meet
                return true;
            }
        }
        return false;
    }
    void removecycle(node*& head) {
        node* slow = head;
        node* fast = head;
        do {
            slow = slow->next;
            fast = fast->next->next;
        } while (slow != fast);

        //according to floyd's algorithm:
        fast = head;      
        while (slow->next != fast->next) {
            slow = slow->next;
            fast = fast->next;
        }
        slow->next = NULL;
    }
};

int main()
{
    linkedlist ll;
    for (int i = 0; i < 8; i++) {
        ll.insertattail(i);
    }
    ll.display();

    ll.head->next->next->next->next->next->next->next->next = ll.head->next->next;
    cout << ll.detectcycle(ll.head)<<endl;
    ll.removecycle(ll.head);
    cout << ll.detectcycle(ll.head)<<endl;

    return 0;
}
