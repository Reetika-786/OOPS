#include <iostream>
using namespace std;

class node{
public:
    int val;
    node *next;
    node(int data){
        val= data;
        next= NULL;
    }
};

class linkedlist{
public:
    node *head;
    linkedlist(){
        head= NULL;
    }
    void insertattail(int value){
        node *new_node = new node(value);
        if(head==NULL){
            head= new_node;
            return;
        }
        node *temp =head;
        while(temp->next != NULL){
            temp = temp->next;
        }
        temp->next= new_node;
    }
    void display(){
        node *temp = head;
        while(temp != NULL){
            cout<<temp->val<<" -> ";
            temp = temp->next;
        }
        cout<<"NULL"<<endl;
    }
    //function to calculate length of linked list
    int getlength(node *head){
        node* temp = head;
        int length=0;
        while(temp != NULL){
            length++;
            temp=temp->next;
        }
        return length;
    }
    node *moveheadbyk(node* head, int k){
        node *ptr = head;
        while(k--){
            ptr = ptr->next;
        }
        return ptr;
    }
    node *getintersection(node* head1, node* head2){
        node *ptr1 = head1;
        node *ptr2 = head2;
        int l1 = getlength(head1);
        int l2 = getlength(head2);
        if(l1 > l2){
            int k = l1-l2;
            ptr1 = moveheadbyk( head1, k);
            ptr2 = head2;
        }
        else{
            int k=l2 - l1;
            ptr1 = head1;
            ptr2 = moveheadbyk(head2 , k);
        }
        
        while(ptr1){    
            //while(ptr2) is also okay as both are at same distance from end now!
            if(ptr1 == ptr2){
                return ptr1;
            }
            ptr1 = ptr1->next;
            ptr2 = ptr2->next;
        }
        return NULL; //if no node matches.
    }
};

int main()
{
    linkedlist ll1;
    linkedlist ll2;
    for(int i=0;i<6;i++){
        int a;
        cin>>a;
        ll1.insertattail(a);
    }
    for(int i=0;i<8;i++){
        int a;
        cin>>a;
        ll2.insertattail(a);
    }
    ll1.display();
    ll2.display();
    cout<< ll1.getintersection(ll1.head, ll2.head);

    return 0;
}
