#include <iostream>
using namespace std;

class node {
public:
    int val;
    node* next;
    node(int data) {
        val = data;
        next = NULL;
    }
};

class linkedlist {
public:
    node* head;
    linkedlist() {
        head = NULL;
    }
    void insertattail(int value) {
        node* new_node = new node(value);
        if (head == NULL) {
            head = new_node;
            return;
        }
        node* temp = head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = new_node;
    }
    void display() {
        node* temp = head;
        while (temp != NULL) {
            cout << temp->val << " -> ";
            temp = temp->next;
        }
        cout << "NULL" << endl;
    }

    node* reorderlinkedlist(node*& head) {
        //find middle node
        node* slow = head;
        node* fast = head;
        while (fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
        }
        //separate linked lists and reverse second half
        node* curr = slow->next;
        slow->next = NULL;
        node* prev = slow;

        while (curr) {
            node* nextptr = curr->next;
            curr->next = prev;
            prev = curr;
            curr = nextptr;
        }
        //prev= lastnode
        node* ptr1 = head;
        node* ptr2 = prev;
        while (ptr1 != ptr2) {
            node* temp = ptr1->next;
            ptr1->next = ptr2;
            ptr1 = ptr2;
            ptr2 = temp;
        }
        return head;
    }

};

int main()
{
    linkedlist ll;
    for (int i = 0; i < 6; i++) {
        ll.insertattail(i);
    }
    ll.display();
    ll.head=ll.reorderlinkedlist(ll.head);
    ll.display();

    return 0;
}
