#include <iostream>
using namespace std;

class node{
public:
    int val;
    node *next;
    node(int data){
        val= data;
        next= NULL;
    }
};

class linkedlist{
public:
    node *head;
    linkedlist(){
        head= NULL;
    }
    void insertattail(int value){
        node *new_node = new node(value);
        if(head==NULL){
            head= new_node;
            return;
        }
        node *temp =head;
        while(temp->next != NULL){
            temp = temp->next;
        }
        temp->next= new_node;
    }
    void display(){
        node *temp = head;
        while(temp != NULL){
            cout<<temp->val<<" -> ";
            temp = temp->next;
        }
        cout<<"NULL"<<endl;
    }
    int removekthnodefromend(node *head, int k){
        node *ptr1 = head;
        node *ptr2 = head;
        //move ptr2 by k steps ahead
        int count = k;
        while(count--){
            ptr2 = ptr2->next;
        }
        //when k = length of linked list, delete head node
        if(ptr2 == NULL){
            node *temp = head;
            head = head->next;
            free(temp);
            return head->val;
        }    
        //now ptr2 is k steps ahead of ptr1
        //when ptr2 is at null, ptr1 will be at node to be deleted
        while(ptr2 -> next != NULL){
            ptr1 = ptr1->next;
            ptr2 = ptr2->next;
        }
        node *temp = ptr1->next;  //node to be deleted
        ptr1 ->next = ptr1->next->next;
        free(temp);
        return head->val;
    }
       
};

int main()
{
    linkedlist ll;
    for(int i=0;i<6;i++){
        int a;
        cin>>a;
        ll.insertattail(a);
    }
    ll.display();
    
    cout<< ll.removekthnodefromend(ll.head, 3)<<endl;
    ll.display();

    return 0;
}
